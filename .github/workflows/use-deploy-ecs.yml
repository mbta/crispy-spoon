# Invoke deploy to ECS
name: Reusable deploy workflow

on:
  workflow_call:
    inputs:
      deployment-env:
        type: string
        required: true
        description: "Environment to deploy to"
      extra-docker-tag:
        type: string
        required: false
        description: "Additional tag to apply to the docker image"
    secrets:
      aws-role-arn:
        required: true
        description: "AWS_ROLE_ARN value"
      docker-repo:
        required: true
        description: "The Docker repository to upload the docker image to, formatted '....amazonaws.com/<app>'"
    outputs: 
      deployment-env:
        value: ${{ jobs.deploy.outputs.deployment-env }}
        description: "The environment that was deployed to"

concurrency:
  group: deploy-${{ inputs.deployment-env }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deployment-env }}
      url: ${{ inputs.deployment-env == 'prod' && 'https://www.mbta.com' || format('https://{0}.mbtace.com', inputs.deployment-env) }}
    outputs:
      deployment-env: ${{ inputs.deployment-env }}
      deployment-url: ${{ inputs.deployment-env == 'prod' && 'https://www.mbta.com' || format('https://{0}.mbtace.com', inputs.deployment-env) }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: us-east-1
      - run: |
          echo "inputs: ${{ toJson(inputs) }}"

      - uses: actions/checkout@v4
        if: ${{ inputs.deployment-env != '' }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.docker-repo }}
          tags: |
            type=sha,priority=1000,prefix=git-
            type=raw,value=${{ inputs.deployment-env }}
            type=raw,priority=900,value=${{ inputs.extra-docker-tag }},enable=${{ inputs.extra-docker-tag != ''}}

      - name: Login to AWS ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.docker-repo }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          load: true
          tags: assets-image
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,dest=/tmp/.buildx-cache,mode=max
          file: /home/runner/deploy/dotcom/Dockerfile

      - name: Upload assets from image into s3
        env:
          AWS_DEFAULT_OUTPUT: json
        run: |
          bash upload_assets.sh assets-image

      - name: Push to ECR
        uses: docker/build-push-action@v5
        id: docker-build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,dest=/tmp/.buildx-cache,mode=max

      - uses: mbta/actions/deploy-ecs@v2
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          ecs-cluster: dotcom
          ecs-service: dotcom-${{ inputs.deployment-env }}
          docker-tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

      ## TODO after Sentry internal integation with Github Actions setup
      # - uses: getsentry/action-release@v1.1.6
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_ORG: ${{  secrets.SENTRY_ORG }}
      #   with:
      #     environment: ${{ inputs.deployment-env }}
      #     projects: mbta-site
      #     version: ${{ needs.app.needs.assets.needs.image.outputs.docker-tag }}
  smoke:
    runs-on: ubuntu-latest
    needs: deploy
    name: Run Smoke Tests against new deployment
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
      - run: npx --prefix assets cypress run --spec cypress/e2e/smoke.cy.js
        env:
          CYPRESS_BASE_URL: ${{ needs.deploy.outputs.deployment-url }}

