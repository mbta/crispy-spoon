# Itinerary Groups

## Section

```elixir
defmodule ItineraryGroups.Helpers do
  @moduledoc false

  def attach_groups_to_plan(%{"from" => from, "to" => to} = trip) do
    plan(from, to)
    |> Kernel.elem(1)
    |> Enum.reject(&Kernel.is_binary/1)
    |> group()
    |> Kernel.then(&Map.put(trip, "groups", &1))
  end

  defp address_to_named_position(address) do
    address
    |> LocationService.geocode()
    |> Kernel.elem(1)
    |> List.first()
    |> TripPlan.NamedPosition.new()
  end

  defp group(itineraries) do
    itineraries
    |> Enum.group_by(&legs_to_hash/1)
    |> groups_to_strings()
  end

  defp groups_to_strings(groups) do
    Enum.map(groups, fn {_, group} ->
      itineraries_to_strings(group)
    end)
  end

  defp itineraries_to_strings(itineraries) when is_list(itineraries) do
    Enum.map(itineraries, &itinerary_to_string/1)
  end

  defp itinerary_to_string(itinerary) do
    itinerary
    |> Map.get(:legs)
    |> Enum.reject(fn leg -> leg.to.name === leg.from.name end)
    |> Enum.map(&leg_to_string/1)
  end

  defp leg_to_tuple(%TripPlan.Leg{mode: %TripPlan.PersonalDetail{}} = leg) do
    {"WALK", leg.from.name, leg.to.name}
  end

  defp leg_to_tuple(%TripPlan.Leg{mode: %{mode: mode}} = leg) do
    {mode, leg.from.name, leg.to.name}
  end

  defp leg_to_string(%TripPlan.Leg{mode: %TripPlan.PersonalDetail{}} = leg) do
    "WALK FROM #{leg.from.name} TO #{leg.to.name}"
  end

  defp leg_to_string(%TripPlan.Leg{mode: %{mode: mode}} = leg) do
    "TAKE #{mode} FROM #{leg.from.name} TO #{leg.to.name}"
  end

  defp legs_to_hash(legs) do
    legs
    |> Enum.map(&leg_to_tuple/1)
    |> :erlang.phash2()
  end

  defp plan(from, to) do
    TripPlanner.OpenTripPlanner.plan(
      address_to_named_position(from),
      address_to_named_position(to),
      []
    )
  end
end

alias ItineraryGroups.Helpers
```

```elixir
Application.start(:yamerl)

write_path =
  System.tmp_dir!()
  |> Path.join("itinerary-groups.yml")
  |> IO.inspect()

plans =
  File.cwd!()
  |> Path.join("/livebooks/trips.yml")
  |> YamlElixir.read_from_file!()
  |> Enum.map(fn plan ->
    Helpers.attach_groups_to_plan(plan)
  end)
  |> List.flatten()

yaml = Ymlr.document!(plans)

File.write!(write_path, yaml)
```
