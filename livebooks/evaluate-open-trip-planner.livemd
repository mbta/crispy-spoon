<!-- livebook:{"file_entries":[{"file":{"file_system_id":"local","file_system_type":"local","path":"/Users/anthonyshull/workspace/dotcom/livebooks/plans.yml"},"name":"plans.yml","type":"file"}]} -->

# Evaluate Open Trip Planner

## Section

```elixir
defmodule EvaluateOpenTripPlanner.Helpers do
  require Logger

  def address_to_named_position(address) do
    address
    |> LocationService.geocode()
    |> Kernel.elem(1)
    |> List.first()
    |> TripPlan.NamedPosition.new()
  end

  def plan(from, to) do
    TripPlan.Api.OpenTripPlanner.plan(
      address_to_named_position(from),
      address_to_named_position(to),
      []
    )
  end

  def itineraries_to_strings(itineraries) when is_binary(itineraries) do
    [itineraries]
  end

  def itineraries_to_strings(itineraries) when is_list(itineraries) do
    Enum.map(itineraries, &itinerary_to_string/1)
  end

  def itinerary_to_string(itinerary) do
    Enum.map(itinerary.legs, &leg_to_string/1)
  end

  def leg_to_string(%{description: "WALK"} = leg) do
    "#{leg.description} FROM #{leg.from.name} TO #{leg.to.name}"
  end

  def leg_to_string(leg) do
    "TAKE #{leg.long_name} #{leg.description} FROM #{leg.from.name} TO #{leg.to.name}"
  end
end

alias EvaluateOpenTripPlanner.Helpers
```

```elixir
{:ok, plans} = YamlElixir.read_from_file("#{File.cwd!()}/livebooks/plans.yml")

content =
  Enum.map(plans, fn plan ->
    itineraries =
      Helpers.plan(plan["from"], plan["to"])
      |> Kernel.elem(1)
      |> Helpers.itineraries_to_strings()

    Map.put(plan, "itineraries", itineraries)
  end)

yaml = Ymlr.document!(content)

File.write!("#{File.cwd!()}/livebooks/itineraries.yml", yaml)
```

<!-- livebook:{"offset":1675,"stamp":{"token":"XCP.wgICvYTFRiBS35bXBE4FO4Vnr1cRhHN01AKnBL1XKbMIhanhfruC-mKNHVC43T0eciYuIF5iS2rZEeXnBHQs1lcWDkqzL__zs_ZYMQ","version":2}} -->
