// import React from "react";
import { renderHook } from "@testing-library/react-hooks";
import useIsGlxOpen from "../useIsGlxOpen";

describe("useIsGlxOpen", () => {
  beforeAll(() => {
    // Mock the template element that defines the open stations
    jest.spyOn(document, "querySelector").mockImplementation(
      (selectors: string): HTMLElement => {
        const div = {
          tagName: "DIV",
          className: "glx-stations-open",
          dataset: {
            stations: "place-lech,place-unsqu,place-spmnl",
            opening: "2022-03-21T04:55:00-04:00"
          }
        };
        return (div as unknown) as HTMLElement;
      }
    );
  });

  describe.each`
    stopId           | expectedStatus | expectedOpen
    ${"place-lech"}  | ${true}        | ${"2022-03-21T04:55:00-04:00"}
    ${"place-sstat"} | ${false}       | ${null}
  `("when $stopId", ({ stopId, expectedStatus, expectedOpen }) => {
    it("returns open status and date", () => {
      const { result } = renderHook(() => useIsGlxOpen(stopId));
      const [isOpen, openDate] = result.current;
      expect(isOpen).toEqual(expectedStatus);
      expect(openDate).toEqual(expectedOpen);
    });
  });
});

describe("useIsGlxOpen no stations", () => {
  it("should return false if there is no station list", () => {
    jest.spyOn(document, "querySelector").mockImplementation(
      (selectors: string): HTMLElement => {
        const div = {
          tagName: "DIV",
          className: "glx-stations-open",
          dataset: {
            stations: null,
            opening: "2022-03-21T04:55:00-04:00"
          }
        };
        return (div as unknown) as HTMLElement;
      }
    );

    const { result } = renderHook(() => useIsGlxOpen("place-lech"));
    const [isOpen, openDate] = result.current;
    expect(isOpen).toBeFalsy();
  });
});

test("useIsGlxOpen not open", () => {
  jest.spyOn(document, "querySelector").mockImplementation(
    (selectors: string): HTMLElement => {
      const div = {
        tagName: "DIV",
        className: "glx-stations-open"
      };
      return (div as unknown) as HTMLElement;
    }
  );

  const { result } = renderHook(() => useIsGlxOpen("place-sstat"));
  const [isOpen, openDate] = result.current;
  expect(isOpen).toEqual(false);
  expect(openDate).toEqual(null);
});
